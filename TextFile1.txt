var pwd = new Password(includeLowercase: true, includeUppercase: true, includeNumeric: false, includeSpecial: false, passwordLength: 21);
var password = pwd.Next();


   var filter = Builders<Users>.Filter.Eq(g => g.Name, "Cersei Lannister");

            // var filter = Builders<Users>.Filter.Eq(g => g.Name, new Regex(@" /cersei Lannister/i"));

            //var filter2 = Builders<Users>.Filter.In(g => g.Email, new[] { "iain_glen@gameofthron.es", "example2@example.com" });
            //var results = _guitarsCollection.Find(g => g.EstablishedYear > 1985).ToList();
            // Fix for CS1501: The 'In' method requires two arguments: the field to filter on and a collection of values.
            // var filter = Builders<Users>.Filter.In(g => g.Email, new[] { "example1@example.com", "example2@example.com" });


            // case insense
            // var regexFilter = Regex.Escape(filter);
            //var bsonRegex = new BsonRegularExpression(regexFilter, "i");


            var builder = Builders<Users>.Filter;

            var builder2 = Builders<Users>.Filter;

            var newFunFilter2 = builder2.Regex("email", "Jack_gleeson@gameofthron.es");

            var newFunFilter = builder.Eq("email", "jack_gleeson@gameofthron.es");

            var list = collection.Find(newFunFilter2).ToList();
            var QuickResult = list.FirstOrDefault();

            Console.WriteLine("\nstart result\n");


            Console.WriteLine(QuickResult.ToBsonDocument());

            Console.WriteLine("\nend result\n");

            List<Users> results = collection.Find(filter).ToList();

            if (results.Count == 0)
            {
                Console.WriteLine("No Results");
            }

            if (results.Count > 0)
            {
                Console.WriteLine("Got Results " + results.Count);
                Console.WriteLine(results[0].Email);
                foreach (var doc in results)
                {

                    Console.WriteLine(doc.ToBsonDocument());
                }
            }


            Console.WriteLine($"All Done! User count: {userCount}");

            //var coll = MongoBase.DB.GetCollection<Users>("users").AsQueryable<Users>();

            //var someBooks = coll.Where(b => b.Name == "Cersei Lannister").Skip(0).Take(10).ToArray();

            //Console.WriteLine(someBooks.ToString());